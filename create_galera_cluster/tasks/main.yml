---
- name: Display Configuration Variables
  ansible.builtin.debug:
    msg:
      - "wordpress: {{ is_wordpress }}"
      - "wordpress_port: {{ wordpress_port }}"
      - "wordpress_db_name: {{ wordpress_db_name }}"
      - "db1_host: {{ db1_host }}"
      - "db2_host: {{ db2_host }}"
      - "db3_host: {{ db3_host }}"
      - "db4_host: {{ db4_host }}"
      - "db5_host: {{ db5_host }}"
      - "db_pass: {{ db_pass }}"
      - "loadbalancer: {{ loadbalancer }}"
      - "monitoring_url: {{ monitoring_url }}"

- name: Установить mariadb-client
  ansible.builtin.apt: # noqa package-latest
    name: mariadb-client
    state: latest

- name: Переподключиться после установки mariadb-client для сброса кэша путей к исполняемым файлам
  ansible.builtin.meta: reset_connection

- name: Создать haproxy каталог
  ansible.builtin.file:
    path: "{{ home_path }}/haproxy"
    state: directory
    mode: '0755'

- name: Создать haproxy config файл из шаблона
  ansible.builtin.template:
    src: haproxy.cfg.j2
    dest: "{{ home_path }}/haproxy/haproxy.cfg"
    mode: '0644'
    force: true

- name: Создать volume для каждой ноды
  community.docker.docker_volume:
    name: "galera_data_node_{{ item }}"
    driver: local
    state: present
  loop: [1, 2, 3, 4, 5]

- name: Поднять бутстрап MariaDB Galera узел
  community.docker.docker_container:
    name: galera_node_1
    image: bitnami/mariadb-galera
    exposed_ports:
      - 3306
    restart_policy: unless-stopped
    env:
      MARIADB_ROOT_PASSWORD: "{{ mariadb_root_password }}"
      MARIADB_USER: "{{ mariadb_user }}"
      MARIADB_PASSWORD: "{{ mariadb_password }}"
      MARIADB_GALERA_MARIABACKUP_PASSWORD: "{{ mariadb_backup_password }}"
      MARIADB_DATABASE: "wordpress"
      MARIADB_GALERA_CLUSTER_BOOTSTRAP: "yes"
      MARIADB_GALERA_FORCE_SAFETOBOOTSTRAP: "yes"
      MARIADB_GALERA_SST_METHOD: "rsync"
    healthcheck:
      test: ["CMD", "mariadb-admin", "ping", "-h", "localhost", "-uroot", "-p{{ mariadb_root_password }}"]
      interval: 10s
      retries: 3
      start_period: 50s
      timeout: 10s
    volumes:
      - "galera_data_node_1:/bitnami/mariadb/data"
    networks:
      - name: "{{ network_name }}"
  register: galera_bootstrap_node

- name: Ожидание поднятия первого контейнера MariaDB Galera
  community.docker.docker_container_info:
    name: galera_node_1
  register: galera_bootstrap_info
  until: galera_bootstrap_info.container.State.Health.Status == "healthy"
  retries: 30
  delay: 10
  changed_when: false
  when: galera_bootstrap_node.changed # noqa no-handler

- name: Поднять дополнительные ноды MariaDB Galera
  community.docker.docker_container:
    name: "galera_node_{{ item }}"
    image: bitnami/mariadb-galera
    exposed_ports:
      - 3306
    env:
      MARIADB_ROOT_PASSWORD: "{{ mariadb_root_password }}"
      MARIADB_USER: "{{ mariadb_user }}"
      MARIADB_PASSWORD: "{{ mariadb_password }}"
      MARIADB_DATABASE: "wordpress"
      MARIADB_GALERA_CLUSTER_ADDRESS: "gcomm://galera_node_1,galera_node_2,galera_node_3,galera_node_4,galera_node_5"
      MARIADB_GALERA_MARIABACKUP_PASSWORD: "{{ mariadb_backup_password }}"
      MARIADB_GALERA_SST_METHOD: "rsync"
    volumes:
      - "galera_data_node_{{ item }}:/bitnami/mariadb/data"
    healthcheck:
      test: ["CMD", "mariadb-admin", "ping", "-h", "localhost", "-uroot", "-p{{ mariadb_root_password }}"]
      interval: 10s
      retries: 3
      start_period: 50s
      timeout: 10s
    networks:
      - name: "{{ network_name }}"
  loop: [2, 3, 4, 5]

- name: Ожидание поднятия всех узлов MariaDB Galera
  community.docker.docker_container_info:
    name: "galera_node_{{ item }}"
  register: galera_info
  until: galera_info.container.State.Health.Status == "healthy"
  retries: 30
  delay: 10
  changed_when: false
  loop: [2, 3, 4, 5]
  when: galera_bootstrap_node.changed # noqa no-handler

- name: Выполнить задачи по настройке Galera cluster
  when: galera_bootstrap_node.changed # noqa no-handler
  block:
    - name: Заблокировать master на запись до завершения переноса данных
      community.docker.docker_container:
        name: mysql_temporary_lock_container
        image: mysql:8.0.42
        command: >
          sh -c "mysql -uroot -p{{ mysql_root_password }} -h {{ master_container_name }} -e 'FLUSH TABLES WITH READ LOCK;'; tail -f /dev/null"
        entrypoint: ""
        network_mode: container:{{ master_container_name }}
        state: started
        detach: true
        restart_policy: "no"
        auto_remove: true
        volumes:
          - "{{ ansible_user }}_dbdata_temporary:/var/lib/mysql"
      register: temp_container

    - name: Снять дамп с master
      community.mysql.mysql_db:
        login_host: 127.0.0.1
        login_user: root
        login_password: "{{ mysql_root_password }}"
        state: dump
        name: wordpress
        target: "{{ dump_path }}"
      changed_when: true

    - name: Остановить временный контейнер для снятия блокировки master
      community.docker.docker_container:
        name: mysql_temporary_lock_container
        state: stopped
      when: temp_container.changed # noqa no-handler

    - name: Остановить и удалить MySQL Master, MySQL Slave и Metric Exporters контейнеры
      community.docker.docker_container:
        name: "{{ item }}"
        state: absent
        force_kill: true
      loop:
        - "{{ master_container_name }}"
        - "{{ slave_container_name }}"
        - mysqld_exporter_master
        - mysqld_exporter_slave

    - name: Поднять HAProxy
      community.docker.docker_container:
        name: haproxy
        image: haproxy
        restart_policy: unless-stopped
        ports:
          - "3306:3306"
        volumes:
          - "/home/{{ ansible_user }}/haproxy/haproxy.cfg:/usr/local/etc/haproxy/haproxy.cfg"
        networks:
          - name: "{{ network_name }}"
        command: /usr/local/sbin/haproxy -f /usr/local/etc/haproxy/haproxy.cfg

    - name: Ожидание запуска HAProxy
      ansible.builtin.wait_for:
        host: 127.0.0.1
        port: 3306
        delay: 10
        timeout: 120

    - name: Восстановить дамп
      community.mysql.mysql_db:
        login_host: 127.0.0.1
        login_user: root
        login_password: "{{ mariadb_root_password }}"
        login_port: 3306
        name: wordpress
        state: import
        target: "{{ dump_path }}"

    - name: Пересоздать контейнер WordPress с подключением к HAProxy
      community.docker.docker_container:
        name: wordpress
        image: wordpress:5.1.1-fpm-alpine
        recreate: true
        restart_policy: unless-stopped
        env_file: ./.env
        env:
          WORDPRESS_DB_HOST: haproxy:3306
          WORDPRESS_DB_USER: "{{ mariadb_user }}"
          WORDPRESS_DB_PASSWORD: "{{ mariadb_password }}"
          WORDPRESS_DB_NAME: wordpress
        volumes:
          - wordpress:/var/www/html
        networks:
          - name: "{{ network_name }}"

    - name: Пересоздать контейнеры Metric Exporters с подключением к Galera Cluster
      community.docker.docker_container:
        name: "mariadb_exporter_node_{{ item }}"
        image: prom/mysqld-exporter
        restart_policy: unless-stopped
        exposed_ports:
          - 9104
        command:
          - "--mysqld.username=root:{{ mariadb_root_password }}"
          - "--mysqld.address=galera_node_{{ item }}:3306"
        labels:
          service: mysqld_exporter
        networks:
          - name: "{{ network_name }}"
      loop: [1, 2, 3, 4, 5]
